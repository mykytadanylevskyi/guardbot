from config import get_cities
from mongodb import Customer, Guards
from aiogram import types
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram import F

account_router = Router()

class AccountEdits(StatesGroup):
    fullname = State()
    city = State()
    description = State()
    accept_city_change = State()
    accept_delete_account = State()


async def get_user_account_markup(user_id: int) -> types.InlineKeyboardMarkup | None:
    keyboard_markup = types.InlineKeyboardMarkup(inline_keyboard = [
            [
                types.InlineKeyboardButton(text = "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è", callback_data = "edit_account"),
                types.InlineKeyboardButton(text = "–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç", callback_data = "delete_account")
            ]
        ]
    )
    if await Customer.check_user_exists(user_id):
        keyboard_markup.inline_keyboard[0].append(types.InlineKeyboardButton(text = "–¢—Ä–∏–≤–æ–≥–∞", callback_data = "alarm"))
    
    return keyboard_markup

@account_router.callback_query(F.data.in_({'edit_account', 'delete_account'}))
async def user_account_options(query: types.CallbackQuery, state: FSMContext):
    answer_data = query.data
    user_id = query.from_user.id
    user = await Customer.get(user_id) or await Guards.get(user_id)
    
    if answer_data == 'edit_account':
        keyboard_markup = types.InlineKeyboardMarkup(inline_keyboard = [
                [
                    types.InlineKeyboardButton(text = "–ü–Ü–ë", callback_data = "fullname"),
                    types.InlineKeyboardButton(text = "–ú—ñ—Å—Ç–æ", callback_data = "city"),
                ]
            ]
        )
        
        if await Guards.check_user_exists(user_id):
            keyboard_markup.inline_keyboard[0].append(types.InlineKeyboardButton(text = "–û–ø–∏—Å", callback_data = "description"))
        

        user_data = f'\n–ü–Ü–ë: {user["fullname"]}' + f'\n–ú—ñ—Å—Ç–æ: {user["city"]}' + f'\n–¢–µ–ª–µ—Ñ–æ–Ω: {user["phone"]}' + f'\n–û–ø–∏—Å: {user["description"]}' if user.get('description') else ''
        await query.message.edit_text('–í–∏–±–µ—Ä—ñ—Ç—å –¥–∞–Ω—ñ, —è–∫—ñ —Ö–æ—á–∏—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:' + user_data, reply_markup = keyboard_markup)

    elif answer_data == 'delete_account':
        await state.set_state(AccountEdits.accept_delete_account)
        keyboard_markup = types.InlineKeyboardMarkup(inline_keyboard = [
                [
                    types.InlineKeyboardButton(text = "–í–∏–¥–∞–ª–∏—Ç–∏", callback_data = "Yes"),
                    types.InlineKeyboardButton(text = "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data = "No")
                ]
            ]
        )
        await query.message.answer(f"–í–∏ –¥—ñ–π—Å–Ω–æ –±–∞–∂–∞—î—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç, —É—Å—ñ –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –≤–∏–¥–∞–ª–µ–Ω—ñ", reply_markup = keyboard_markup)
        

@account_router.callback_query(F.data.in_({'fullname', 'city', 'description'}))
async def edit_account_options(query: types.CallbackQuery, state: FSMContext):
    await query.message.delete()
    answer_data = query.data
    user_id = query.from_user.id
    

    if answer_data == 'fullname':
        await query.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ü–Ü–ë:")
        await state.set_state(AccountEdits.fullname)
        
    elif answer_data == 'city':
        await state.set_state(AccountEdits.accept_city_change)
        current_city = None

        if await Guards.check_user_exists(user_id):
            current_city = await Guards.get(user_id)
        elif await Customer.check_user_exists(user_id):
            current_city = await Customer.get(user_id)

        keyboard_markup = types.InlineKeyboardMarkup(inline_keyboard = [
                [
                    types.InlineKeyboardButton(text = "–¢–∞–∫", callback_data = "Yes"),
                    types.InlineKeyboardButton(text = "–ù—ñ", callback_data = "No")
                ]
            ]
        )
        await query.message.answer(f"–í–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ç–æ? –í–∞—à–µ –º—ñ—Å—Ç–æ: {current_city['city']}", reply_markup = keyboard_markup)
 
    elif answer_data == 'description':
        await state.set_state(AccountEdits.description)
        await query.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –æ–ø–∏—Å:")


@account_router.message(AccountEdits.fullname)
async def change_user_fullname_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if await Guards.check_user_exists(user_id):
        await Guards.set_fullname(user_id, message.text)
    elif await Customer.check_user_exists(user_id):
        await Customer.set_fullname(user_id, message.text)

    await message.answer("–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–∏–ª–∏ –ü–Ü–ë üëçüèª.")
    await state.clear()
    await message.answer("–í–∞—à –∫–∞–±—ñ–Ω–µ—Ç: ", reply_markup = await get_user_account_markup(user_id))


@account_router.message(AccountEdits.city)
async def change_user_city_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if await Guards.check_user_exists(user_id):
        await Guards.set_city(user_id, message.text)
    elif await Customer.check_user_exists(user_id):
        await Customer.set_city(user_id, message.text)

    await message.answer("–ú—ñ—Å—Ç–æ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–µ üëçüèª.") 
    await state.clear()
    await message.answer("–í–∞—à –∫–∞–±—ñ–Ω–µ—Ç: ", reply_markup = await get_user_account_markup(user_id))


@account_router.message(AccountEdits.description)
async def change_user_description_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if await Guards.check_user_exists(user_id):
        await Guards.set_description(user_id, message.text)

    await message.answer("–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–∏–ª–∏ –æ–ø–∏—Å üëçüèª.")
    await state.clear()
    await message.answer("–í–∞—à –∫–∞–±—ñ–Ω–µ—Ç: ", reply_markup = await get_user_account_markup(user_id))
    

@account_router.callback_query(AccountEdits.accept_city_change, F.data.in_({'Yes', 'No'}))
async def comfirm_city_change(query: types.CallbackQuery, state: FSMContext):
    answer_data = query.data
    user_id = query.from_user.id
    
    if answer_data == 'Yes':
        await state.set_state(AccountEdits.city)  
        await query.message.answer(f"–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–µ –º—ñ—Å—Ç–æ —ñ–∑ —Å–ø–∏—Å–∫—É ({' ,'.join(get_cities().keys())}): ")
        await query.message.delete()

    elif answer_data == 'No':
        await query.message.edit_text('–í–∞—à –∫–∞–±—ñ–Ω–µ—Ç:', reply_markup = await get_user_account_markup(user_id))


@account_router.callback_query(AccountEdits.accept_delete_account, F.data.in_({'Yes', 'No'}))
async def comfirm_account_delate(query: types.CallbackQuery, state: FSMContext):
    answer_data = query.data
    user_id = query.from_user.id

    await state.clear()
    await query.message.delete()

    if answer_data == 'Yes':
        if await Customer.check_user_exists(user_id):
            await Customer.delete(user_id)
        elif await Guards.check_user_exists(user_id):
            await Guards.delete(user_id)

        await query.message.answer('–í–∞—à –∞–∫–∞—É–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–æ üëçüèª.')
        keyboard_markup = types.InlineKeyboardMarkup(inline_keyboard = [
            [
                types.InlineKeyboardButton(text = "–ö–ª—ñ—î–Ω—Ç", callback_data = "customer"),
                types.InlineKeyboardButton(text = "–û—Ö–æ—Ä–æ–Ω–µ—Ü—å", callback_data = "guard") 
            ]
        ])
        
        await query.message.answer("–í–∞—Å –≤—ñ—Ç–∞—î <b>Guard bot</b>.–ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º—ñ —è–∫:", reply_markup = keyboard_markup)
    
    elif answer_data == 'No':
        await query.message.edit_text('–í–∞—à –∫–∞–±—ñ–Ω–µ—Ç:', reply_markup = await get_user_account_markup(user_id))
    