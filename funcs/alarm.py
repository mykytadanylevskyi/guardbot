from bot import bot
from funcs.account import AccountEdits
from mongodb import Customer, Guards
from aiogram import types
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram import F
from config import get_cities
from config import *
from aiogram.methods.edit_message_text import EditMessageText

class AlarmState(StatesGroup):
    amount_of_guards = State()
    explain_reason = State()
    get_user_location = State()
    comfirm_alarm = State()
    user_respond = State()

alarm_router = Router()

@alarm_router.callback_query(F.data == 'alarm')
async def alarm_handler(query: types.CallbackQuery, state: FSMContext):
    await state.set_state(AlarmState.amount_of_guards)
    await query.message.answer('–í–∏ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–¢—Ä–∏–≤–æ–≥–∞\". –í–∞—à—ñ –¥–∞–Ω—ñ —Ç–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –±—É–¥–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –¥–æ —á–∞—Ç—É (–æ–±—Ä–∞–Ω–µ –∫–ª—ñ—î–Ω—Ç–æ–º –º—ñ—Å—Ç–æ –≤ –æ—Å–æ–±–∏—Å—Ç–æ–º—É –∫–∞–±—ñ–Ω–µ—Ç—ñ, –∞–±–æ –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó), –≤–∫–∞–∂—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ö–æ—Ä–æ–Ω—Ü—ñ–≤ –Ω–∞ –≤–∏–∫–ª–∏–∫ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 1 –æ—Ö–æ—Ä–æ–Ω–µ—Ü—å):')


@alarm_router.message(AlarmState.amount_of_guards)
async def set_amount_of_guards_handler(message: types.Message, state: FSMContext):
    if message.text.isnumeric():
        await state.set_data({'amount_of_guards': int(message.text)})
        if int(message.text) >= 10:
            await state.set_state(AlarmState.explain_reason)
            await message.answer('–ü–æ—è—Å–Ω—ñ—Å—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤–∏–∫–ª–∏–∫—É –≤–µ–ª–∏–∫–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –æ—Ö–æ—Ä–æ–Ω—Ü—ñ–≤:')
        else:
            await state.set_state(AlarmState.get_user_location)
            await message.answer('–¢–µ–ø–µ—Ä —Å–∫–∏–Ω—å—Ç–µ –ª–æ–∫–∞—Ü—ñ—é, –∫—É–¥–∏ –≤–∏ –≤–∏–∫–ª–∏–∫–∞—î—Ç–µ –æ—Ö–æ—Ä–æ–Ω—Ü—ñ–≤:')
    else:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ö—Ä–æ–Ω—Ü—ñ–≤, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:')


@alarm_router.message(AlarmState.explain_reason)
async def explain_reason_of_alarm_handler(message: types.Message, state: FSMContext):
    await state.update_data({'reason_of_alarm': message.text})
    await state.set_state(AlarmState.get_user_location)
    await message.answer('–¢–µ–ø–µ—Ä —Å–∫–∏–Ω—å—Ç–µ –ª–æ–∫–∞—Ü—ñ—é, –∫—É–¥–∏ –≤–∏ –≤–∏–∫–ª–∏–∫–∞—î—Ç–µ –æ—Ö–æ—Ä–æ–Ω—Ü—ñ–≤:')


@alarm_router.message(AlarmState.get_user_location)
async def get_alarm_location(message: types.Message, state: FSMContext):
    if message.location:
        await state.update_data({'location': message.location})
        await state.set_state(AlarmState.comfirm_alarm)

        keyboard_markup = types.InlineKeyboardMarkup(inline_keyboard = [
            [
                types.InlineKeyboardButton(text = "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–∫–ª–∏–∫", callback_data = "comfirm_alarm"),
                types.InlineKeyboardButton(text = "–°–∫–∞—Å—É–≤–∞—Ç–∏ –≤–∏–∫–ª–∏–∫", callback_data = "cancle_alarm") 
            ]
        ])
        await message.answer('–í–∏ –¥—ñ–π—Å–Ω–æ –±–∞–∂–∞—î—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –≤–∏–∫–ª–∏–∫ <b>–æ—Ö–æ—Ä–æ–Ω–∏</b>?', reply_markup = keyboard_markup)
    else:
        await message.answer('–í–∏ –Ω–µ–≤—ñ—Ä–Ω–æ –≤–∫–∞–∑–∞–ª–∏ –ª–æ–∫–∞—Ü—ñ—é, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:')
    

@alarm_router.callback_query(AlarmState.comfirm_alarm, F.data.in_({"comfirm_alarm", "cancle_alarm"}))
async def comfirm_alarm_handler(query: types.CallbackQuery, state: FSMContext):
    answer_data = query.data
    user_id = query.from_user.id

    user = await Customer.get(user_id)
    data = await state.get_data()
    await state.clear()

    if answer_data == 'comfirm_alarm':
        chat_id = get_cities()[user['city']]
        reason_of_alarm = data["reason_of_alarm"] if data.get("reason_of_alarm") else ""
        amount_of_guards = data["amount_of_guards"]
        location: types.Location = data["location"]
        
        
        await bot.send_location(
            chat_id = chat_id, 
            latitude = location.latitude, 
            longitude = location.longitude, 
            horizontal_accuracy = location.horizontal_accuracy,
            live_period = location.live_period,
            heading = location.heading,
            proximity_alert_radius = location.proximity_alert_radius,
        )
        
        keyboard_markup = types.InlineKeyboardMarkup(inline_keyboard = [
            [
                types.InlineKeyboardButton(text = f"–ü—Ä–∏–π–Ω—è—Ç–∏ –≤–∏–∫–ª–∏–∫ 0/{amount_of_guards}", callback_data = "take_alarm"),
            ]
        ])
        alarm_message = await bot.send_message(
            chat_id = chat_id, 
            text = f'–¢–†–ò–í–û–ì–ê\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ö–æ—Ä–æ–Ω—Ü—ñ–≤: {amount_of_guards}\n{reason_of_alarm}',
            reply_markup = keyboard_markup
        )
        add_new_alarm(alarm_message.message_id, amount_of_guards, user_id)
        
        keyboard_markup = types.InlineKeyboardMarkup(inline_keyboard = [
            [
                types.InlineKeyboardButton(text = f"–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –≤–∏–∫–ª–∏–∫", callback_data = "customer_cancle_alarm"),
            ]
        ])
        await query.message.answer('–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤–∏–∫–ª–∏–∫ üëçüèª.', reply_markup = keyboard_markup)
        await query.message.delete()
        
    elif answer_data == 'cancle_alarm': 
        await query.message.answer('–í–∏ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å—É–≤–∞–ª–∏ –≤–∏–∫–ª–∏–∫ –æ—Ö–æ—Ä–æ–Ω–∏ üëçüèª.')

async def close_alarm(user_id: int, state: FSMContext):
    alarm_id = get_alarm_by_customer_id(user_id)
    remove_alarm(alarm_id)
    keyboard_markup = types.InlineKeyboardMarkup(inline_keyboard = [
        [
            types.InlineKeyboardButton(text = f"–ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫", callback_data = "leave_respond"),
        ]
    ])
    data = await state.get_data()
    if data.get('guards'):
        await state.set_state(AlarmState.user_respond)
        await bot.send_message(chat_id = user_id, text = '–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫:', reply_markup = keyboard_markup)


@alarm_router.callback_query(F.data == 'customer_cancle_alarm')
async def comfirm_alarm_handler(query: types.CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    
    user = await Customer.get(user_id)
    chat_id = get_cities()[user['city']]

    await query.message.answer('–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–∏–∫–ª–∏–∫ –æ—Ö–æ—Ä–æ–Ω–∏ üëçüèª.')
    await close_alarm(user_id, state)
    
    alarm_id = get_alarm_by_customer_id(user_id)
    guards = get_alarm_guards(alarm_id)
    await state.set_data({'guards': guards})
    print(guards)
    await bot.edit_message_reply_markup(chat_id = chat_id, message_id = int(alarm_id), reply_markup = None)
    for guard in guards:
        await bot.send_message(chat_id = guard, text = '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞–º–æ–≤–Ω–∏–∫–æ–º')
     
    await query.message.delete()
        

@alarm_router.callback_query(F.data == 'take_alarm')
async def take_alarm_handler(query: types.CallbackQuery):
    message_id = query.message.message_id
    user_id = query.from_user.id
    
    add_guard_to_alarm(message_id, user_id)
    add_to_accepted_alarms(user_id, query.message.message_id)
    current_guards = get_alarm_guards(message_id)
    max_guards = get_max_alarm_guards(message_id)
    
    
    if len(current_guards) == max_guards:
        await query.message.delete_reply_markup()

    # elif await Guards.check_user_exists(user_id) or get_from_accepted_alarms(user_id) is None: 
    await query.message.edit_reply_markup(
        types.InlineKeyboardMarkup(inline_keyboard = [
            [
                types.InlineKeyboardButton(text = f"–ü—Ä–∏–π–Ω—è—Ç–∏ –≤–∏–∫–ª–∏–∫ {len(current_guards)}/{max_guards}", callback_data = "take_alarm"),
            ]
        ]
    ))
    
    keyboard_markup = types.InlineKeyboardMarkup(inline_keyboard = [
        [
            types.InlineKeyboardButton(text = f'–í—ñ–¥–º—ñ–Ω–∞ –≤–∏–∫–ª–∏–∫—É', callback_data = 'cancle_alarm_task'),
            types.InlineKeyboardButton(text = f'–ü—Ä–∏–±—É–≤ –Ω–∞ –≤–∏–∫–ª–∏–∫', callback_data = 'arrived_on_alarm'),
            types.InlineKeyboardButton(text = f'–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–∫–ª–∏–∫', callback_data = 'finish_alarm')
        ]
    ])
    customer = await Customer.get(int(get_alarm_customer(message_id)))
    await bot.send_message(chat_id = user_id, text = f'–ü—Ä–∏ –ø—Ä–∏–±—É—Ç—Ç—ñ –Ω–∞ –º—ñ—Å—Ü–µ –≤–∏–∫–ª–∏–∫—É\
        –Ω–∞–∂–º—ñ—Ç—å \"–ü—Ä–∏–±—É–≤ –Ω–∞ –≤–∏–∫–ª–∏–∫\"(\"–í—ñ–¥–º—ñ–Ω–∞ –≤–∏–∫–ª–∏–∫—É\" —Å—Ç–∞—î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—é).\
        –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –Ω–∞–∂–º—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–∫–ª–∏–∫\".\n\n     \
        –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞:\n \
        \n<b>–ü–Ü–ë: {customer["fullname"]}</b>\
        \n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {customer["phone"]}</b>\
        ',
        reply_markup = keyboard_markup)

    
@alarm_router.callback_query(F.data.in_({'cancle_alarm_task', 'arrived_on_alarm', 'finish_alarm'}))
async def guard_alarm_handler(query: types.CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    alarm_id = int(get_from_accepted_alarms(user_id))
    customer_id = int(get_alarm_customer(alarm_id))


    if query.data == 'cancle_alarm_task':
        await query.message.delete()
        remove_from_accepted_alarms(user_id)
        await query.message.answer('–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –≤–∏–∫–ª–∏–∫ üëçüèª.')
        
        if get_cont_of_active_guards(alarm_id) == 1:
            close_alarm(customer_id, state)
        else:
            await bot.send_message(chat_id = customer_id, text = '–û–¥–∏–Ω —ñ–∑ –æ—Ö–æ—Ä–Ω—Ü—ñ–≤ –≤—ñ–¥–º—ñ–Ω–∏–≤ –≤–∞—à –≤–∏–∫–ª–∏–∫.')
        
        
    elif query.data == 'arrived_on_alarm':
        keyboard_markup = query.message.reply_markup
        del query.message.reply_markup.inline_keyboard[0][0:2]
        
        await query.message.edit_reply_markup(keyboard_markup)
        await query.message.answer('–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ—î –ø—Ä–∏–±—É—Ç—Ç—è üëçüèª.')

    elif query.data == 'finish_alarm':
        remove_from_accepted_alarms(user_id)
        await query.message.delete()
        await query.message.answer('–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–∏–∫–ª–∏–∫ üëçüèª.')
        
        if get_cont_of_active_guards(alarm_id) == 1:
            close_alarm(customer_id, state)
        
        else:
            await bot.send_message(chat_id = customer_id, text = '–û–¥–∏–Ω —ñ–∑ –æ—Ö–æ—Ä–Ω—Ü—ñ–≤ –∑–∞–≤–µ—Ä—à–∏–≤ –≤–∞—à –≤–∏–∫–ª–∏–∫.')